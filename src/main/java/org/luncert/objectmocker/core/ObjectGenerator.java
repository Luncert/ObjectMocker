package org.luncert.objectmocker.core;

import com.google.common.collect.ImmutableMap;
import lombok.extern.slf4j.Slf4j;
import org.luncert.objectmocker.builtinGenerator.*;
import org.luncert.objectmocker.exception.GeneratorException;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.*;

@Slf4j
public class ObjectGenerator implements Serializable {

  private static final Map<Class, AbstractGenerator> BUILTIN_GENERATORS = ImmutableMap
      .<Class, AbstractGenerator>builder()
      .put(String.class, new StringGenerator())
      .put(ZonedDateTime.class, new ZonedDateTimeGenerator())
      .put(Date.class, new DateGenerator())
      .put(Boolean.class, new BooleanGenerator())
      .put(boolean.class, new BooleanGenerator())
      .put(Integer.class, new IntegerGenerator())
      .put(int.class, new IntegerGenerator())
      .put(Long.class, new LongGenerator())
      .put(long.class, new LongGenerator())
      .put(Double.class, new DoubleGenerator())
      .put(double.class, new DoubleGenerator())
      .put(BigDecimal.class, new BigDecimalGenerator())
      .build();
  private static final long serialVersionUID = 5287347012157068215L;

  @SuppressWarnings("unchecked")
  public static <T> T generate(Class<T> clazz, String ...tmpIgnores) {
    String className = clazz.getSimpleName();

    // try create new instance for target class
    Object target;
    try {
      target = clazz.getConstructor().newInstance();
    } catch (Exception e) {
      throw new GeneratorException("Failed to create a new instance of target class " +
          className + ".");
    }

    Set<String> tmpIgnoreSet = tmpIgnores.length == 0 ?
        Collections.EMPTY_SET : new HashSet<>(Arrays.asList(tmpIgnores));

    try {
      for (Field field : clazz.getDeclaredFields()) {
        String fieldName = field.getName();
        Class<?> fieldType = field.getType();

        // skip static or final field
        int modifiers = field.getModifiers();
        if (Modifier.isStatic(modifiers) || Modifier.isFinal(modifiers) || field.isSynthetic()) {
          log.debug("{}.{} - Field has been skipped because it has static or final modifier, or generated by compiler.",
              className, fieldName);
          continue;
        }

        // skip field need be ignored
        if (tmpIgnoreSet.contains(fieldName)) {
          continue;
        }

        // To set value for field, we need set it accessible at first
        field.setAccessible(true);
        AbstractGenerator generator = BUILTIN_GENERATORS.get(fieldType);
        if (generator != null) {
          // generate field value using built-in generator
          field.set(target, generator.generate(fieldType));
        } else {
          throw new GeneratorException("Couldn't find a appropriate generator for type " + fieldType);
        }
      }
    } catch (IllegalAccessException e) {
      throw new GeneratorException(
          "Failed to set field value for instance of class " + className + ".", e);
    }
    return clazz.cast(target);
  }

}
